package sbnz.integracija;
import demo.facts.Writer;
import demo.facts.Genre;
import demo.facts.User;
import demo.facts.UserState
import demo.facts.AuthorizedRecommendedFavoriteGenreBooks;
import java.time.LocalDate;
import java.util.ArrayList;
import dtos.UserRatingsDto
import demo.facts.Book;
import demo.facts.Rating;

rule "New User if less than 10 books rated AND has favorite Genres"
no-loop
    agenda-group "userState"
        when
            $u : User($u.getRatingNumber < 10, $u.hasFavoriteGenres == true )
        then
            System.out.println("NEW_WITH_GENRES");
            modify($u){setState(UserState.NEW_WITH_GENRES)};
    end

rule "New User if less than 10 books rate AND NO favorite Genres"
no-loop
    agenda-group "userState"
        when
            $u : User($u.getRatingNumber < 10, $u.hasFavoriteGenres == false )
        then
            System.out.println("NEW");
            modify($u){setState(UserState.NEW)};
    end

rule "Old User if more than 10 books rated"
no-loop
    agenda-group "userState"
        when
            $u : User($u.getRatingNumber >= 10)
        then
            System.out.println("OLD");
            modify($u){setState(UserState.OLD)};
    end


rule "Evaluate similar users"
    agenda-group "oldUser"
        when
            $u: User($u.getState == UserState.OLD, $s: ratings)
            $r: UserRatingsDto($r.getCorrelationCoefficient($s, $u.getAvgRating) < 0.5)
        then
            delete($r);
end

rule "Insert books that are rated by similar users"
    agenda-group "oldUser"
        when
           $b: UserRatingsDto()
           $u: User($u.getState == UserState.OLD)
           $r: Rating(rate >= 4 && !$u.hasRatedBook(book)) from $b.ratings
        then
            insert($r.book);
end

rule "Evaluate Writers for Favorite Genres"
    agenda-group "newGenreUser"
        when
            $u : User($u.state == UserState.NEW_WITH_GENRES , $f: favoriteGenres)
            $g : Genre() from $f
            $w : Writer($w.getGenreRepresentationInWriter($g) >= 0.30)
            $l : AuthorizedRecommendedFavoriteGenreBooks()
        then
            $l.addWriter($w);
    end

rule "Empty Writers from Working Memmory"
    agenda-group "newGenreUser"
        when
            $w : Writer()
        then
            delete($w);
    end

rule "Find 4 Most Popular Writers"
    agenda-group "newGenreUser"
        when
            $l : AuthorizedRecommendedFavoriteGenreBooks($a: allWriters != null,$t: topWriters)
            eval($a.size() > 0)
            eval($t.size() < 4)
        then
            modify($l){addPopularWriter($l.getPopularWriterAndDelete())};
    end

rule "Add Books from Top Writers"
    agenda-group "newGenreUser"
        when
            $l : AuthorizedRecommendedFavoriteGenreBooks($t: topWriters)
            $w : Writer() from $t
            $b : Book() from $w.getBooks()
        then
            $l.addBook($b);
    end

rule "Get Best Books"
    salience -100
    agenda-group "newGenreUser"
        when
            $l : AuthorizedRecommendedFavoriteGenreBooks($a: allBooks != null,$t: topBooks)
            eval($t.size() < 10)
            eval($a.size() > 0)
            $b : Book($b.isEmpty()== false) from $l.getPopularBookAndDelete()
        then
            modify($l){addPopularBook($b)};
    end